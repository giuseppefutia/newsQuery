0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.0.2
3 info using node@v0.10.32
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add spec="." args=[".",null]
8 verbose parsed spec { raw: '.',
8 verbose parsed spec   scope: null,
8 verbose parsed spec   name: null,
8 verbose parsed spec   rawSpec: '.',
8 verbose parsed spec   spec: '/Users/iain/Development/newsQuery',
8 verbose parsed spec   type: 'local' }
9 verbose cache add local package /Users/iain/Development/newsQuery
10 silly lockFile 3a52ce78- .
11 verbose lock . /Users/iain/.npm/3a52ce78-.lock
12 verbose tar pack [ '/Users/iain/.npm/newsquery/0.9.4/package.tgz', '.' ]
13 verbose tarball /Users/iain/.npm/newsquery/0.9.4/package.tgz
14 verbose folder .
15 info prepublish newsquery@0.9.4
16 silly lockFile 1f1177db-tar tar://.
17 verbose lock tar://. /Users/iain/.npm/1f1177db-tar.lock
18 silly lockFile 69b2543d--npm-newsquery-0-9-4-package-tgz tar:///Users/iain/.npm/newsquery/0.9.4/package.tgz
19 verbose lock tar:///Users/iain/.npm/newsquery/0.9.4/package.tgz /Users/iain/.npm/69b2543d--npm-newsquery-0-9-4-package-tgz.lock
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 1f1177db-tar tar://.
22 silly lockFile 69b2543d--npm-newsquery-0-9-4-package-tgz tar:///Users/iain/.npm/newsquery/0.9.4/package.tgz
23 silly lockFile 69b2543d--npm-newsquery-0-9-4-package-tgz tar:///Users/iain/.npm/newsquery/0.9.4/package.tgz
24 silly lockFile 0d05285b-iain-npm-newsquery-0-9-4-package /Users/iain/.npm/newsquery/0.9.4/package
25 verbose lock /Users/iain/.npm/newsquery/0.9.4/package /Users/iain/.npm/0d05285b-iain-npm-newsquery-0-9-4-package.lock
26 silly lockFile 0d05285b-iain-npm-newsquery-0-9-4-package /Users/iain/.npm/newsquery/0.9.4/package
27 silly lockFile 0d05285b-iain-npm-newsquery-0-9-4-package /Users/iain/.npm/newsquery/0.9.4/package
28 silly lockFile 3a52ce78- .
29 silly lockFile 3a52ce78- .
30 silly publish { author:
30 silly publish    { name: 'Iain Collins',
30 silly publish      email: 'me@iaincollins.com',
30 silly publish      url: 'http://iaincollins.com' },
30 silly publish   name: 'newsquery',
30 silly publish   description: 'The newsQuery NPM package provides a library to interact with the BBC News Labs APIs',
30 silly publish   version: '0.9.4',
30 silly publish   main: './lib/newsquery.js',
30 silly publish   keywords: [ 'newsQuery', 'news', 'bbc', 'labs', 'semantic', 'api' ],
30 silly publish   repository:
30 silly publish    { type: 'git',
30 silly publish      url: 'git://github.com/iaincollins/newsQuery.git' },
30 silly publish   dependencies:
30 silly publish    { q: '>=1.0.0',
30 silly publish      request: '>=2.33.0',
30 silly publish      moment: '>=2.8.0',
30 silly publish      'node-cache': '>=1.0.0',
30 silly publish      crypto: '>=0.0.3' },
30 silly publish   devDependencies: { mocha: '>=1.19.0' },
30 silly publish   scripts: { test: 'mocha test/*.js' },
30 silly publish   engines: { node: '*' },
30 silly publish   readme: '#newsQuery - For BBC News Labs APIs\n\n[![NPM version](https://badge.fury.io/js/newsquery.svg)](http://badge.fury.io/js/newsquery) [![Build Status](https://travis-ci.org/iaincollins/newsQuery.svg?branch=master)](https://travis-ci.org/iaincollins/newsQuery)\n\n---\n\nThe BBC News Labs APIs let you run queries on content from an increasing list of over 40 news sources which includes BBC News but also other publications like Sky News, The Guardian, The Mirror, The Independent, The Daily Record, The Huffington Post and others.\n\nThe majority of our content is in the form of article but there are also images, video and tweets from select sources.\n\nThe BBC News Labs API\'s are **experimental** and are chiefly intended for use by R&D teams in news organisations and universities. If you\'d like to more more or have any feedback about them, please get in touch with @BBC_News_Labs via Twitter.\n\n**Important!** To use this library you must have a BBC News Labs API key (which is free to sign up for). See instructions below for how to do this.\n\n### How to get an API key\n\nYou can obtain an API key from the BBC Developer Portal\nhttp://bbc.apiportal.apigee.com\n\nRegistration is free and immediate, you will receive an automated email when you sign up, which contains a link to activate your account. Check your junk mail folder if you can\'t find it.\n\n1. After registering, create a new application.\n2. Select both the "bbcrd-newslabs-apis-product" and "bbcrd-juicer-apis-product" APIs for your application.\n3. Your API key will be listed as the "Consumer Key" for your application.\n\n## Usage with examples\n\n### getSources()\n\nYou can get a list of sources the Semantic API knows about with `getSources()`:\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getSources()\n.then(function(sources) {\n    console.log(sources);\n});\n```\n\nThe response is an array of objects with `name` and `uri` properties:\n\n``` javascript\n[ { name: \'Sky News\',\n    uri: \'http://www.bbc.co.uk/ontologies/bbc/SkyNews\'\n  },\n  { name: \'The Guardian\',\n    uri: \'http://www.bbc.co.uk/ontologies/bbc/TheGuardian\'\n  } ...\n ]\n ```\n\n### getConcepts()\n\nYou need to get a definitive URI for a concept before you can search for articles that mention it.\n\nA concept is typically a person, place, organisation or theme (e.g. "law", "economics"). These correspond to entries in dbpedia, which uses an ontology derived from data in Wikipedia.\n\nAn example that returns the first 5 concepts matching the term "Rooney":\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getConcepts("Rooney", 5)\n.then(function(concepts) {\n    console.log(concepts);\n});\n```\n\nThe response from getConcepts() is an array of concepts, each with a unique URI (and possibly an image).\n\nNote in the example below \'Wayne Rooney\' is a SoccerPlayer, and SoccerPlayers are Athletes, and Athletes are People.\n\nMickey Rooney is classed as a Person, although it has not specifically identified him as an Actor - the granularity of the specificity may vary from concept to concept.\n\nNB: \'Agent\', which is as the last type for both, is simply a top level ontology class associated with all People and Organisations (and does not refer to being sports or acting agent). In this context an \'Agent\' is a thing that acts in the world, for example, as distinct from something that is an Activity or a Place.\n\n``` javascript\n[ { name: \'Wayne Rooney\',\n    uri: \'http://dbpedia.org/resource/Wayne_Rooney\',\n    image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Rooney_CL.jpg/200px-Rooney_CL.jpg\',\n    type: \n     [ \'http://dbpedia.org/ontology/SoccerPlayer\',\n       \'http://dbpedia.org/ontology/Athlete\',\n       \'http://dbpedia.org/ontology/Person\',\n       \'http://dbpedia.org/ontology/Agent\' ] },\n  { name: \'Mickey Rooney\',\n    uri: \'http://dbpedia.org/resource/Mickey_Rooney\',\n    image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Mickey_Rooney_still.jpg/200px-Mickey_Rooney_still.jpg\',\n    type: \n     [ \'http://dbpedia.org/ontology/Person\',\n       \'http://dbpedia.org/ontology/Agent\' ] }\n]\n````\n\n### getConcept()\n\nIf you have the definitive URI for a concept you can use it\'s URI to request detailed information about a concept, such as a description and it\'s type.\n\ne.g. You can check the "type" field to see if it\'s categorized as a Person, Place, Organisation, etc (you can also check for more specific types, like SoccerPlayer or Company).\n\nNote that calling getConcept() explicitly on a URI may return more specific type information than is returned along with a concept in other calls, such as getArticlesByConcept().\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getConcept("http://dbpedia.org/resource/David_Cameron", 1)\n.then(function(concept) {\n    console.log(concept);\n});\n```\n\nThe response is a single object, with a description and additional metadata, typically an image, and at least one article about the subject (you can specify more via the second parameter to the function).\n\n``` javascript\n { description: \'David William Donald Cameron is the Prime Minister of the United Kingdom, First Lord of the Treasury, Minister for the Civil Service and Leader of the Conservative Party. He represents Witney as its Member of Parliament (MP). Cameron studied Philosophy, Politics and Economics (PPE) at Oxford, gaining a first class honours degree. He then joined the Conservative Research Department and became Special Adviser to Norman Lamont, and then to Michael Howard.\',\n  articles: \n   [ { product: \'http://www.bbc.co.uk/ontologies/bbc/IrishIndependant\',\n       summary: \'The UK Independence Party has stormed to victory in the European elections and unleashing a political whirlwind in Britain.\',\n       title: \'Farage throws down gauntlet as Ukip unleashes whirlwind\',\n       article: \'http://www.independent.ie/world-news/europe/farage-throws-down-gauntlet-as-ukip-unleashes-whirlwind-30306752.html\',\n       cpsid: \'irish_independant_7ddba5bc3c79dca7f45714c782c73e61625d8b85\',\n       published: \'2014-05-27T01:30:00Z\' } ]\n  thumbnail: \'http://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Official-photo-cameron.png/200px-Official-photo-cameron.png\',\n  name: \'David Cameron\',\n  type: \n   [ \'http://dbpedia.org/ontology/OfficeHolder\',\n     \'http://dbpedia.org/ontology/Person\',\n     \'http://dbpedia.org/ontology/Agent\' ],\n  uri: \'http://dbpedia.org/resource/David_Cameron\' }\n```\n\n### getCoOccuringConcepts()\n\nYou can fetch concepts that - by being linked through news articles - are linked to a given concept. For example, to get concepts related to "Ukraine":\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getCoOccuringConcepts("http://dbpedia.org/resource/Ukraine")\n.then(function(concepts) {\n    console.log(concepts);\n});\n```\n\nThe response from getCoOccuringConcepts() is an array of concepts, returned in order of how many co-occurrences there are between the concepts.\n\ni.e. how much times both concepts have been mentioned in the same article, tagged in one image, mentioned in a video, etc.\n\n``` javascript\n[ { name: \'Russia\',\n    uri: \'http://dbpedia.org/resource/Russia\',\n    occurrences: 9530,\n    image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Flag_of_Russia.svg/200px-Flag_of_Russia.svg.png\' \n  }\n]\n```\n\n\nYou can also optionally specify:\n\n- A limit on the number of results\n- The URI one or more `types` (as a string, or array of strings) of object to get (e.g. "http://www.bbc.co.uk/ontologies/bbc/Person", "http://www.bbc.co.uk/ontologies/bbc/Company" etc.)\n- The URI of a specific source you want to filter on (e.g. http://www.bbc.co.uk/ontologies/bbc/SkyNews)\n\nFor example the following query would return the top 10 people Sky News mentioned in stories that related to the Ukraine.\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getCoOccuringConcepts("http://dbpedia.org/resource/Ukraine",\n                                10,\n                                "http://www.bbc.co.uk/ontologies/bbc/Person"\n                                "http://www.bbc.co.uk/ontologies/bbc/SkyNews")\n.then(function(concepts) {\n    console.log(concepts);\n});\n```\n\n### getArticlesByConcept()\n\nOnce you have the URI for a concept, you can use it to find news articles mentioning it. You can specify a single concept URI or an array of URIs.\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getArticlesByConcept(["http://dbpedia.org/resource/David_Cameron"], 5)\n.then(function(articles) {\n    console.log(articles);\n});\n```\n\nExample response from getArticlesByConcept() is shown below.\n\nNote that the response includes quite high level type information for each concept, but it does return the latitude and longitude values for concepts that are identified as places.\n\nThis is an example of slightly inconsistent behaviour between function calls - as lat/lon values are not returned for Places by any other calls. This is something we are looking at to see if we can improve.\n\n``` javascript\n[ \n  { id: \'the_huffington_post_a819bb600f1a3c9d11a2a635e528f972ab241751\',\n    source: \'http://www.bbc.co.uk/ontologies/bbc/TheHuffingtonPost\',\n    url: \'http://www.huffingtonpost.co.uk/2014/05/27/tony-blair-defends-eu-immigration_n_5396082.html?utm_hp_ref=uk&ir=UK\',\n    dateCreated: \'2014-05-27T11:49:15Z\',\n    title: \'Tony Blair Defends Immigration And EU, Says Ukip \\\'Do Not Have All The Answers\\\'\',\n    description: \'Tony Blair  has moved to unite the left against Ukip in his strongest attack yet against Nigel Farage and the eurosceptic party.  \\n \\nThe former prime minister, who is still reviled by many left-wingers over his decision to invade Iraq in 2003, said Ukip did "not have all the answers" and should be exposed for having "no actual solutions to the problems of the 21st century". \\n \\nBlair, 61, told BBC Radio 4\\\'s Today programme that blaming immigrants for problems is a "backwards and regressive ste...\',\n    image: \'http://i.huffpost.com/gen/1818157/thumbs/o-TONY-BLAIR-570.jpg\',\n    concepts: \n     [ { name: \'Brussels\',\n         uri: \'http://dbpedia.org/resource/Brussels\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/TE-Collage_Brussels.png/200px-TE-Collage_Brussels.png\',\n         type: [ \'http://dbpedia.org/ontology/Place\' ],\n         lat: \'50.85\',\n         lon: \'4.35\' },\n       { name: \'David Cameron\',\n         uri: \'http://dbpedia.org/resource/David_Cameron\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Official-photo-cameron.png/200px-Official-photo-cameron.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Great Britain\',\n         uri: \'http://dbpedia.org/resource/Great_Britain\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Satellite_image_of_Great_Britain_and_Northern_Ireland_in_April_2002.jpg/200px-Satellite_image_of_Great_Britain_and_Northern_Ireland_in_April_2002.jpg\',\n         type: [ \'http://dbpedia.org/ontology/Place\' ],\n         lat: \'53.826\',\n         lon: \'-2.422\' },\n       { name: \'BBC Radio 4\',\n         uri: \'http://dbpedia.org/resource/BBC_Radio_4\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/5/53/BBC_Radio_4.svg/200px-BBC_Radio_4.svg.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Ed Miliband\',\n         uri: \'http://dbpedia.org/resource/Ed_Miliband\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Ed_Miliband_on_August_27,_2010_cropped-an_less_red-2.jpg/200px-Ed_Miliband_on_August_27,_2010_cropped-an_less_red-2.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Nick Clegg\',\n         uri: \'http://dbpedia.org/resource/Nick_Clegg\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/6/68/NickClegg_worldeconomic.jpg/200px-NickClegg_worldeconomic.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Alan Milburn\',\n         uri: \'http://dbpedia.org/resource/Alan_Milburn\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Alan_Milburn.JPG/200px-Alan_Milburn.JPG\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Israeli Labor Party\',\n         uri: \'http://dbpedia.org/resource/Israeli_Labor_Party\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Labor_(Israel)_logo.png/200px-Labor_(Israel)_logo.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Iraq\',\n         uri: \'http://dbpedia.org/resource/Iraq\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Flag_of_Iraq.svg/200px-Flag_of_Iraq.svg.png\',\n         type: [ \'http://dbpedia.org/ontology/Place\' ],\n         lat: \'33.333333333333336\',\n         lon: \'44.43333333333333\' },\n       { name: \'Tony Blair\',\n         uri: \'http://dbpedia.org/resource/Tony_Blair\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/WORLD_ECONOMIC_FORUM_ANNUAL_MEETING_2009_-_Tony_Blair.jpg/200px-WORLD_ECONOMIC_FORUM_ANNUAL_MEETING_2009_-_Tony_Blair.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Nigel Farage\',\n         uri: \'http://dbpedia.org/resource/Nigel_Farage\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Nigel_Farage.jpg/200px-Nigel_Farage.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Diane Abbott\',\n         uri: \'http://dbpedia.org/resource/Diane_Abbott\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Diane_Abbott,_New_Statesman_hustings,_trimmed.jpg/200px-Diane_Abbott,_New_Statesman_hustings,_trimmed.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'UK Independence Party\',\n         uri: \'http://dbpedia.org/resource/UK_Independence_Party\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/UKIP_logo.png/200px-UKIP_logo.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'The Huffington Post\',\n         uri: \'http://dbpedia.org/resource/The_Huffington_Post\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Huffington_Post.jpg/200px-Huffington_Post.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Europe\',\n         uri: \'http://dbpedia.org/resource/Europe\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/d/de/Europe_orthographic_Caucasus_Urals_boundary.svg/200px-Europe_orthographic_Caucasus_Urals_boundary.svg.png\',\n         type: [ \'http://dbpedia.org/ontology/Place\' ] },\n       { name: \'Conservative Party (UK)\',\n         uri: \'http://dbpedia.org/resource/Conservative_Party_(UK)\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Conservative_logo_2006.svg/200px-Conservative_logo_2006.svg.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Labour Party (UK)\',\n         uri: \'http://dbpedia.org/resource/Labour_Party_(UK)\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Logo_Labour_Party.svg/200px-Logo_Labour_Party.svg.png\',\n         type: \n          [ \'http://dbpedia.org/ontology/Organisation\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'John Hutton, Baron Hutton of Furness\',\n         uri: \'http://dbpedia.org/resource/John_Hutton,_Baron_Hutton_of_Furness\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Msc_2009-Sunday,_11.00_-_12.30_Uhr-Zwez_005_Hutton_detail.jpg/200px-Msc_2009-Sunday,_11.00_-_12.30_Uhr-Zwez_005_Hutton_detail.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] },\n       { name: \'Owen Jones (writer)\',\n         uri: \'http://dbpedia.org/resource/Owen_Jones_(writer)\',\n         image: \'http://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/OwenJones.jpg/200px-OwenJones.jpg\',\n         type: \n          [ \'http://dbpedia.org/ontology/Person\',\n            \'http://dbpedia.org/ontology/Agent\' ] } ]\n  }\n]\n```\n\n### getConceptOccurrencesOverTime()\n\nYou can query how many occurrences there are for a given concept between a series of dates, the startDate and endDate can be up to a year apart.\n\nIf you don\'t specify a startDate or an endDate (both should be strings in the form \'YYYY-MM-DD\') then the current date will be used for either value.\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getConceptOccurrencesOverTime("http://dbpedia.org/resource/Ukraine", "2014-05-24", "2014-05-28")\n.then(function(occurrences) {\n    console.log(occurrences);\n});\n```\n\nThe response from getConceptOccurrencesOverTime() is an array of objects with \'date\' and \'value\' keys, in order of oldest to most recent.\n\n``` javascript\n[ { date: \'2014-05-24\', value: 5 },\n  { date: \'2014-05-25\', value: 13 },\n  { date: \'2014-05-26\', value: 28 },\n  { date: \'2014-05-27\', value: 17 },\n  { date: \'2014-05-28\', value: 9 } ]\n```\n\nIf you want to filter by a specific source, you can specify a source URI - from the list returned by `getSources()` - as an optional 4th parameter.\n\nThe below example shows how to get the number of articles related to Russia that appeared in The Guardian in the last 7 days:\n\n``` javascript\nvar moment = require("moment");\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getConceptOccurrencesOverTime("http://dbpedia.org/resource/Russia",\n    moment().subtract(7,\'days\').format(\'YYYY-MM-DD\'),\n    moment().format(\'YYYY-MM-DD\'),\n    "http://www.bbc.co.uk/ontologies/bbc/TheGuardian")\n.then(function(occurrences) {\n    console.log(occurrences);\n});\n```\n\nNote: You can request dates up to a year apart. The bulk of the data goes back over 6 months, we are still in the progress of adding sources.\n\n### getSimilarArticles()\n\nYou can also use a slightly different approach get articles similar to an article you\'ve already got an ID for.\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.getSimilarArticles("25663926")\n.then(function(articles) {\n    console.log(articles);\n});\n```\nThe article ID value usually the property labeled `id` or `cps_id` and is usually a string (although it can just be a series of digits, it should be treated as string).\n\n### searchArticles()\n\nYou can also retrieve articles using a keyword search.\n\nThis will return matching articles, with titles, descriptions, which organisation published it, the URL for the article and a list of concepts the article was tagged with (including the URI\'s for each concept, what type of object the concept is and the "confidence score" for each concept that the article has been tagged with).\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.searchArticles("Ukraine Russia")\n.then(function(articles) {\n  console.log(articles);\n});\n```\n\nYou can optionally specify a date range if you are only interested in articles published on a specific date:\n\n``` javascript\nvar apiKey = \'1234567890ABCDEF\';\nvar newsQuery = require(\'newsquery\')(apiKey);\nnewsQuery.searchArticles("Syria", "2014-09-01", "2014-09-07")\n.then(function(articles) {\n  console.log(articles);\n});\n```\n\nOnly articles from the following sources are currently returned by this method:\n\n * BBC News (displayed as "NewsWeb")\n * TheGuardian\n * TheMirror\n * TheIndependent\n * ExpressStar\n * TheHuffingtonPost\n * DailyRecord\n * SkyNews\n * STV\n\nThe API for this function is well developed but the client implementation in this library is new and it uses a different backend endpoint from the other methods in this library (i.e. it hits different databases) but the data set is the same.\n\nThis method does not yet support pagination, returning images or video, additional sources.\n\n\n## Additional documentation\n\nYou can find full information about how the raw BBC News Labs semantic APIs work on the #newsHACK site:\n\nThe Semantic News Labs API:\nhttp://newshack.co.uk/newshack-ii/newslabs-apis/\n\nThe News Juicer API:\nhttp://newshack.co.uk/newshack-ii/juicer-apis/\n\nNote that the formats of the responses may differ if using the raw APIs, this module attempts to simplify them to make them easier to consume.\n',
30 silly publish   readmeFilename: 'README.md',
30 silly publish   gitHead: '42c4cd673e1ccdb3911ed2dd01ce22fc63f15b53',
30 silly publish   bugs: { url: 'https://github.com/iaincollins/newsQuery/issues' },
30 silly publish   homepage: 'https://github.com/iaincollins/newsQuery',
30 silly publish   _id: 'newsquery@0.9.4',
30 silly publish   _shasum: '262add3a9b3b2c3bbb08448ea2103f2310ae5a36',
30 silly publish   _from: '.' }
31 verbose mapToRegistry name newsquery
32 verbose mapToRegistry uri https://registry.npmjs.org/newsquery
33 verbose publish registryBase https://registry.npmjs.org/
34 verbose stack Error: auth and email required for publishing
34 verbose stack     at RegClient.publish (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:17:14)
34 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:114:14
34 verbose stack     at mapToRegistry (/usr/local/lib/node_modules/npm/lib/utils/map-to-registry.js:53:3)
34 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:102:3)
34 verbose stack     at Array.1 (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
34 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
34 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
34 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
34 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:62:5
34 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:22:7
35 verbose cwd /Users/iain/Development/newsQuery
36 error Darwin 13.4.0
37 error argv "node" "/usr/local/bin/npm" "publish"
38 error node v0.10.32
39 error npm  v2.0.2
40 error code ENEEDAUTH
41 error need auth auth and email required for publishing
41 error need auth You need to authorize this machine using `npm adduser`
42 verbose exit [ 1, true ]
